/**
 * @fileoverview Firestore Security Rules for the project management application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has their own data tree under `/users/{userId}`, and only the authenticated user can access their own data.
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`, creating a private data space for each user.
 *  - `/users/{userId}/projects/{projectId}`: Stores project details.
 *  - `/users/{userId}/projects/{projectId}/subtasks/{subtaskId}`: Stores subtasks for each project.
 *  - `/users/{userId}/projects/{projectId}/goals/{goalId}`: Stores goals for each project.
 *  - `/users/{userId}/projects/{projectId}/notes/{noteId}`: Stores notes for each project.
 *  - `/users/{userId}/projects/{projectId}/research/{researchId}`: Stores research items for each project.
 *
 * Key Security Decisions:
 * - Users can only access their own data tree.
 * - Data consistency is enforced on create operations by validating that internal ownership fields match the path.
 * - Data consistency is enforced on update operations by enforcing that the ownership field is immutable.
 * - `list` operations are only allowed for the owner of the data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Fundamental check for authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource, based on the `userId` path segment.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership based on the `userId` path segment.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     *              Used for update and delete operations to prevent acting on non-existent documents.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ensures the resource exists before attempting to modify it.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }


    /**
     * @description Enforces that the `id` field in the data matches the `userId` path parameter on create.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ensures data consistency between the path and document data.
     */
    function isValidNewOwner(userId) {
        return request.resource.data.id == userId;
    }

    /**
     * @description Enforces that the `id` field is immutable on update.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ensures data consistency on updates.
     */
    function isOwnerIdImmutable(userId) {
        return request.resource.data.id == resource.data.id;
    }

    match /users/{userId} {
          allow read, write: if isOwner(userId);

          match /projects/{projectId} {
            allow get: if isOwner(userId);
            allow list: if isOwner(userId);
            allow create: if isOwner(userId);
            allow update: if isOwner(userId) ;
            allow delete: if isOwner(userId);

            match /subtasks/{subtaskId} {
              allow get: if isOwner(userId);
              allow list: if isOwner(userId);
              allow create: if isOwner(userId);
              allow update: if isOwner(userId);
              allow delete: if isOwner(userId);
            }

            match /goals/{goalId} {
              allow get: if isOwner(userId);
              allow list: if isOwner(userId);
              allow create: if isOwner(userId);
              allow update: if isOwner(userId);
              allow delete: if isOwner(userId);
            }

            match /notes/{noteId} {
              allow get: if isOwner(userId);
              allow list: if isOwner(userId);
              allow create: if isOwner(userId);
              allow update: if isOwner(userId);
              allow delete: if isOwner(userId);
            }

            match /research/{researchId} {
              allow get: if isOwner(userId);
              allow list: if isOwner(userId);
              allow create: if isOwner(userId);
              allow update: if isOwner(userId);
              allow delete: if isOwner(userId);
            }
          }
    }
  }
}